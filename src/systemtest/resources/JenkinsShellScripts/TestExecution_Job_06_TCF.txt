import groovy.json.JsonSlurper
def baseUrl = "REMREM_BASE_URL_TO_BE_REPLACED";

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////TCS//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

def uriPathTCS1 = baseUrl + "/generateAndPublish?mp=eiffelsemantics&msgType=EiffelTestCaseStartedEvent";
def jsonTCS1 = """
  {
    "msgParams": {
      "meta": {
        "type": "EiffelTestCaseStartedEvent",
        "version": "1.1.0",
        "tags": []
      }
    },
    "eventParams": {
      "data": {
        "executor": "",
        "liveLogs": [],
        "customData": []
      },
      "links": [
        {
          "type": "TEST_CASE_EXECUTION",
          "target": \"""" + build.environment.EVENT_ID_CASE1 + """\"
        }
      ]
    }
  }
""";

generateEiffelEventAndPublish(uriPathTCS1, jsonTCS1);

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////TCS//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

def uriPathTCS2 = baseUrl + "/generateAndPublish?mp=eiffelsemantics&msgType=EiffelTestCaseStartedEvent";
def jsonTCS2 = """
  {
    "msgParams": {
      "meta": {
        "type": "EiffelTestCaseStartedEvent",
        "version": "1.1.0",
        "tags": []
      }
    },
    "eventParams": {
      "data": {
        "executor": "",
        "liveLogs": [],
        "customData": []
      },
      "links": [
        {
          "type": "TEST_CASE_EXECUTION",
          "target": \"""" + build.environment.EVENT_ID_CASE2 + """\"
        }
      ]
    }
  }
""";

generateEiffelEventAndPublish(uriPathTCS2, jsonTCS2);

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////TCF//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

def uriPathTCF1 = baseUrl + "/generateAndPublish?mp=eiffelsemantics&msgType=EiffelTestCaseFinishedEvent";
def jsonTCF1 = """
  {
    "msgParams": {
      "meta": {
        "type": "EiffelTestCaseFinishedEvent",
        "version": "1.1.0",
        "tags": []
      }
    },
    "eventParams": {
      "data": {
        "outcome": {
          "verdict": "PASSED",
          "conclusion": "SUCCESSFUL",
          "description": "",
          "metrics": []
        },
        "persistentLogs": [],
        "customData": []
      },
      "links": [
        {
          "type": "TEST_CASE_EXECUTION",
          "target": \"""" + build.environment.EVENT_ID_CASE1 + """\"
        }
      ]
    }
  }
""";

generateEiffelEventAndPublish(uriPathTCF1, jsonTCF1);

////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////TCF//////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

def uriPathTCF2 = baseUrl + "/generateAndPublish?mp=eiffelsemantics&msgType=EiffelTestCaseFinishedEvent";
def jsonTCF2 = """
  {
    "msgParams": {
      "meta": {
        "type": "EiffelTestCaseFinishedEvent",
        "version": "1.1.0",
        "tags": []
      }
    },
    "eventParams": {
      "data": {
        "outcome": {
          "verdict": "PASSED",
          "conclusion": "SUCCESSFUL",
          "description": "",
          "metrics": []
        },
        "persistentLogs": [],
        "customData": []
      },
      "links": [
        {
          "type": "TEST_CASE_EXECUTION",
          "target": \"""" + build.environment.EVENT_ID_CASE2 + """\"
        }
      ]
    }
  }
""";

generateEiffelEventAndPublish(uriPathTCF2, jsonTCF2);

def generateEiffelEventAndPublish(uriPath, json){
  def post = new URL(uriPath).openConnection();
  def message = json
  post.setRequestMethod("POST")
  post.setDoOutput(true)
  post.setRequestProperty("Content-Type", "application/json")
  post.getOutputStream().write(message.getBytes("UTF-8"));
      
  responseText = post.getInputStream().getText();
    
  def jsonSlurper = new JsonSlurper()
  responseJson = jsonSlurper.parseText(responseText);
  return responseJson["events"][0]["id"].toString();
}